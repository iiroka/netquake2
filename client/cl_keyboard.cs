/*
 * Copyright (C) 1997-2001 Id Software, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
 * USA.
 *
 * =======================================================================
 *
 * Upper layer of the keyboard implementation. This file processes all
 * keyboard events which are generated by the low level keyboard layer.
 * Remeber, that the mouse is handled by the refresher and not by the
 * client!
 *
 * =======================================================================
 */

namespace Quake2 {

    partial class QClient {

        /* Max length of a console command line. 1024
        * chars allow for a vertical resolution of
        * 8192 pixel which should be enough for the
        * years to come. */
        public const int MAXCMDLINE = 1024;

        /* number of console command lines saved in history,
        * must be a power of two, because we use & (NUM_KEY_LINES-1)
        * instead of % so -1 wraps to NUM_KEY_LINES-1 */
        public const int NUM_KEY_LINES = 32;

        /* these are the key numbers that should be passed to Key_Event
        they must be matched by the low level key event processing! */
        public enum QKEYS {
            K_TAB = 9,
            K_ENTER = 13,
            K_ESCAPE = 27,
            // Note: ASCII keys are generally valid but don't get constants here,
            // just use 'a' (yes, lowercase) or '2' or whatever, however there are
            // some special cases when writing/parsing configs (space or quotes or
            // also ; and $ have a special meaning there so we use e.g. "SPACE" instead),
            // see keynames[] in cl_keyboard.c
            K_SPACE = 32,

            K_BACKSPACE = 127,

            K_COMMAND = 128, // "Windows Key"
            K_CAPSLOCK,
            K_POWER,
            K_PAUSE,

            K_UPARROW,
            K_DOWNARROW,
            K_LEFTARROW,
            K_RIGHTARROW,

            K_ALT,
            K_CTRL,
            K_SHIFT,
            K_INS,
            K_DEL,
            K_PGDN,
            K_PGUP,
            K_HOME,
            K_END,

            K_F1,
            K_F2,
            K_F3,
            K_F4,
            K_F5,
            K_F6,
            K_F7,
            K_F8,
            K_F9,
            K_F10,
            K_F11,
            K_F12,
            K_F13,
            K_F14,
            K_F15,

            K_KP_HOME,
            K_KP_UPARROW,
            K_KP_PGUP,
            K_KP_LEFTARROW,
            K_KP_5,
            K_KP_RIGHTARROW,
            K_KP_END,
            K_KP_DOWNARROW,
            K_KP_PGDN,
            K_KP_ENTER,
            K_KP_INS,
            K_KP_DEL,
            K_KP_SLASH,
            K_KP_MINUS,
            K_KP_PLUS,
            K_KP_NUMLOCK,
            K_KP_STAR,
            K_KP_EQUALS,

            K_MOUSE1,
            K_MOUSE2,
            K_MOUSE3,
            K_MOUSE4,
            K_MOUSE5,

            K_MWHEELDOWN,
            K_MWHEELUP,

            K_SUPER, // TODO: what is this? SDL doesn't seem to know it..
            K_COMPOSE,
            K_MODE,
            K_HELP,
            K_PRINT,
            K_SYSREQ,
            K_SCROLLOCK,
            K_MENU,
            K_UNDO,

            // The following are mapped from SDL_Scancodes, used as a *fallback* for keys
            // whose SDL_KeyCode we don't have a K_ constant for, like German Umlaut keys.
            // The scancode name corresponds to the key at that position on US-QWERTY keyboards
            // *not* the one in the local layout (e.g. German 'Ã–' key is K_SC_SEMICOLON)
            // !!! NOTE: if you add a scancode here, make sure to also add it to:
            // 1. keynames[] in cl_keyboard.c
            // 2. IN_TranslateScancodeToQ2Key() in input/sdl.c
            K_SC_A,
            K_SC_B,
            K_SC_C,
            K_SC_D,
            K_SC_E,
            K_SC_F,
            K_SC_G,
            K_SC_H,
            K_SC_I,
            K_SC_J,
            K_SC_K,
            K_SC_L,
            K_SC_M,
            K_SC_N,
            K_SC_O,
            K_SC_P,
            K_SC_Q,
            K_SC_R,
            K_SC_S,
            K_SC_T,
            K_SC_U,
            K_SC_V,
            K_SC_W,
            K_SC_X,
            K_SC_Y,
            K_SC_Z,
            // leaving out SDL_SCANCODE_1 ... _0, we handle them separately already
            // also return, escape, backspace, tab, space, already handled as keycodes
            K_SC_MINUS,
            K_SC_EQUALS,
            K_SC_LEFTBRACKET,
            K_SC_RIGHTBRACKET,
            K_SC_BACKSLASH,
            K_SC_NONUSHASH,
            K_SC_SEMICOLON,
            K_SC_APOSTROPHE,
            K_SC_GRAVE,
            K_SC_COMMA,
            K_SC_PERIOD,
            K_SC_SLASH,
            // leaving out lots of key incl. from keypad, we already handle them as normal keys
            K_SC_NONUSBACKSLASH,
            K_SC_INTERNATIONAL1, /**< used on Asian keyboards, see footnotes in USB doc */
            K_SC_INTERNATIONAL2,
            K_SC_INTERNATIONAL3, /**< Yen */
            K_SC_INTERNATIONAL4,
            K_SC_INTERNATIONAL5,
            K_SC_INTERNATIONAL6,
            K_SC_INTERNATIONAL7,
            K_SC_INTERNATIONAL8,
            K_SC_INTERNATIONAL9,
            K_SC_THOUSANDSSEPARATOR,
            K_SC_DECIMALSEPARATOR,
            K_SC_CURRENCYUNIT,
            K_SC_CURRENCYSUBUNIT,

            // hardcoded pseudo-key to open the console, emitted when pressing the "console key"
            // (SDL_SCANCODE_GRAVE, the one between Esc, 1 and Tab) on layouts that don't
            // have a relevant char there (unlike Brazilian which has quotes there which you
            // want to be able to type in the console) - the user can't bind this key.
            K_CONSOLE,

            // Keyboard keys / codes end here. Any new ones should go before this.
            // From here on, only gamepad controls must be allowed.
            // Otherwise, separate bindings (keyboard / controller) menu options will not work.

            K_BTN_A,
            K_JOY_FIRST_REGULAR = K_BTN_A,
            K_BTN_B,
            K_BTN_X,
            K_BTN_Y,
            K_BTN_BACK,
            K_BTN_GUIDE,
            K_BTN_START,
            K_STICK_LEFT,
            K_STICK_RIGHT,
            K_SHOULDER_LEFT,
            K_SHOULDER_RIGHT,
            K_TRIG_LEFT,
            K_TRIG_RIGHT,
            K_DPAD_UP,
            K_DPAD_DOWN,
            K_DPAD_LEFT,
            K_DPAD_RIGHT,
            K_BTN_MISC1,
            K_PADDLE_1,
            K_PADDLE_2,
            K_PADDLE_3,
            K_PADDLE_4,
            K_TOUCHPAD,

            // add other joystick/controller keys before this one
            // and adjust it accordingly, also remember to add corresponding _ALT key below!
            K_JOY_LAST_REGULAR = K_TOUCHPAD,

            /* Can't be mapped to any action (=> not regular) */
            K_JOY_BACK,

            K_BTN_A_ALT,
            K_JOY_FIRST_REGULAR_ALT = K_BTN_A_ALT,
            K_BTN_B_ALT,
            K_BTN_X_ALT,
            K_BTN_Y_ALT,
            K_BTN_BACK_ALT,
            K_BTN_GUIDE_ALT,
            K_BTN_START_ALT,
            K_STICK_LEFT_ALT,
            K_STICK_RIGHT_ALT,
            K_SHOULDER_LEFT_ALT,
            K_SHOULDER_RIGHT_ALT,
            K_TRIG_LEFT_ALT,
            K_TRIG_RIGHT_ALT,
            K_DPAD_UP_ALT,
            K_DPAD_DOWN_ALT,
            K_DPAD_LEFT_ALT,
            K_DPAD_RIGHT_ALT,
            K_BTN_MISC1_ALT,
            K_PADDLE_1_ALT,
            K_PADDLE_2_ALT,
            K_PADDLE_3_ALT,
            K_PADDLE_4_ALT,
            K_TOUCHPAD_ALT,

            K_LAST
        };

        private record keyname_t
        {
            public string name { get; init; }
            public QKEYS keynum { get; init; }
        }

        /* Translates internal key representations
        * into human readable strings. */
        private readonly keyname_t[] keynames = {
            new keyname_t(){name="TAB", keynum=QKEYS.K_TAB},
            new keyname_t(){name="ENTER", keynum=QKEYS.K_ENTER},
            new keyname_t(){name="ESCAPE", keynum=QKEYS.K_ESCAPE},
            new keyname_t(){name="SPACE", keynum=QKEYS.K_SPACE},
            // new keyname_t(){name="SEMICOLON", ';'},   /* because a raw semicolon separates commands */
            // new keyname_t(){name="DOUBLEQUOTE", '"'}, /* because "" has special meaning in configs */
            // new keyname_t(){name="QUOTE", '\'' },     /* just to be sure */
            // new keyname_t(){name="DOLLAR", '$'},      /* $ is used in macros => can occur in configs */
            new keyname_t(){name="BACKSPACE", keynum=QKEYS.K_BACKSPACE},

            new keyname_t(){name="COMMAND", keynum=QKEYS.K_COMMAND},
            new keyname_t(){name="CAPSLOCK", keynum=QKEYS.K_CAPSLOCK},
            new keyname_t(){name="POWER", keynum=QKEYS.K_POWER},
            new keyname_t(){name="PAUSE", keynum=QKEYS.K_PAUSE},

            new keyname_t(){name="UPARROW", keynum=QKEYS.K_UPARROW},
            new keyname_t(){name="DOWNARROW", keynum=QKEYS.K_DOWNARROW},
            new keyname_t(){name="LEFTARROW", keynum=QKEYS.K_LEFTARROW},
            new keyname_t(){name="RIGHTARROW", keynum=QKEYS.K_RIGHTARROW},

            new keyname_t(){name="ALT", keynum=QKEYS.K_ALT},
            new keyname_t(){name="CTRL", keynum=QKEYS.K_CTRL},
            new keyname_t(){name="SHIFT", keynum=QKEYS.K_SHIFT},

            new keyname_t(){name="INS", keynum=QKEYS.K_INS},
            new keyname_t(){name="DEL", keynum=QKEYS.K_DEL},
            new keyname_t(){name="PGDN", keynum=QKEYS.K_PGDN},
            new keyname_t(){name="PGUP", keynum=QKEYS.K_PGUP},
            new keyname_t(){name="HOME", keynum=QKEYS.K_HOME},
            new keyname_t(){name="END", keynum=QKEYS.K_END},

            new keyname_t(){name="F1", keynum=QKEYS.K_F1},
            new keyname_t(){name="F2", keynum=QKEYS.K_F2},
            new keyname_t(){name="F3", keynum=QKEYS.K_F3},
            new keyname_t(){name="F4", keynum=QKEYS.K_F4},
            new keyname_t(){name="F5", keynum=QKEYS.K_F5},
            new keyname_t(){name="F6", keynum=QKEYS.K_F6},
            new keyname_t(){name="F7", keynum=QKEYS.K_F7},
            new keyname_t(){name="F8", keynum=QKEYS.K_F8},
            new keyname_t(){name="F9", keynum=QKEYS.K_F9},
            new keyname_t(){name="F10", keynum=QKEYS.K_F10},
            new keyname_t(){name="F11", keynum=QKEYS.K_F11},
            new keyname_t(){name="F12", keynum=QKEYS.K_F12},
            new keyname_t(){name="F13", keynum=QKEYS.K_F13},
            new keyname_t(){name="F14", keynum=QKEYS.K_F14},
            new keyname_t(){name="F15", keynum=QKEYS.K_F15},

            new keyname_t(){name="KP_HOME", keynum=QKEYS.K_KP_HOME},
            new keyname_t(){name="KP_UPARROW", keynum=QKEYS.K_KP_UPARROW},
            new keyname_t(){name="KP_PGUP", keynum=QKEYS.K_KP_PGUP},
            new keyname_t(){name="KP_LEFTARROW", keynum=QKEYS.K_KP_LEFTARROW},
            new keyname_t(){name="KP_5", keynum=QKEYS.K_KP_5},
            new keyname_t(){name="KP_RIGHTARROW", keynum=QKEYS.K_KP_RIGHTARROW},
            new keyname_t(){name="KP_END", keynum=QKEYS.K_KP_END},
            new keyname_t(){name="KP_DOWNARROW", keynum=QKEYS.K_KP_DOWNARROW},
            new keyname_t(){name="KP_PGDN", keynum=QKEYS.K_KP_PGDN},
            new keyname_t(){name="KP_ENTER", keynum=QKEYS.K_KP_ENTER},
            new keyname_t(){name="KP_INS", keynum=QKEYS.K_KP_INS},
            new keyname_t(){name="KP_DEL", keynum=QKEYS.K_KP_DEL},
            new keyname_t(){name="KP_SLASH", keynum=QKEYS.K_KP_SLASH},
            new keyname_t(){name="KP_MINUS", keynum=QKEYS.K_KP_MINUS},
            new keyname_t(){name="KP_PLUS", keynum=QKEYS.K_KP_PLUS},
            new keyname_t(){name="KP_NUMLOCK", keynum=QKEYS.K_KP_NUMLOCK},
            new keyname_t(){name="KP_STAR", keynum=QKEYS.K_KP_STAR},
            new keyname_t(){name="KP_EQUALS", keynum=QKEYS.K_KP_EQUALS},

            new keyname_t(){name="MOUSE1", keynum=QKEYS.K_MOUSE1},
            new keyname_t(){name="MOUSE2", keynum=QKEYS.K_MOUSE2},
            new keyname_t(){name="MOUSE3", keynum=QKEYS.K_MOUSE3},
            new keyname_t(){name="MOUSE4", keynum=QKEYS.K_MOUSE4},
            new keyname_t(){name="MOUSE5", keynum=QKEYS.K_MOUSE5},

            new keyname_t(){name="MWHEELUP", keynum=QKEYS.K_MWHEELUP},
            new keyname_t(){name="MWHEELDOWN", keynum=QKEYS.K_MWHEELDOWN},

            new keyname_t(){name="BTN_A", keynum=QKEYS.K_BTN_A},
            new keyname_t(){name="BTN_B", keynum=QKEYS.K_BTN_B},
            new keyname_t(){name="BTN_X", keynum=QKEYS.K_BTN_X},
            new keyname_t(){name="BTN_Y", keynum=QKEYS.K_BTN_Y},
            new keyname_t(){name="STICK_LEFT", keynum=QKEYS.K_STICK_LEFT},
            new keyname_t(){name="STICK_RIGHT", keynum=QKEYS.K_STICK_RIGHT},
            new keyname_t(){name="SHOULDR_LEFT", keynum=QKEYS.K_SHOULDER_LEFT},
            new keyname_t(){name="SHOULDR_RIGHT", keynum=QKEYS.K_SHOULDER_RIGHT},
            new keyname_t(){name="TRIG_LEFT", keynum=QKEYS.K_TRIG_LEFT},
            new keyname_t(){name="TRIG_RIGHT", keynum=QKEYS.K_TRIG_RIGHT},

            new keyname_t(){name="DP_UP", keynum=QKEYS.K_DPAD_UP},
            new keyname_t(){name="DP_DOWN", keynum=QKEYS.K_DPAD_DOWN},
            new keyname_t(){name="DP_LEFT", keynum=QKEYS.K_DPAD_LEFT},
            new keyname_t(){name="DP_RIGHT", keynum=QKEYS.K_DPAD_RIGHT},

            new keyname_t(){name="PADDLE_1", keynum=QKEYS.K_PADDLE_1},
            new keyname_t(){name="PADDLE_2", keynum=QKEYS.K_PADDLE_2},
            new keyname_t(){name="PADDLE_3", keynum=QKEYS.K_PADDLE_3},
            new keyname_t(){name="PADDLE_4", keynum=QKEYS.K_PADDLE_4},
            new keyname_t(){name="BTN_MISC1", keynum=QKEYS.K_BTN_MISC1},
            new keyname_t(){name="TOUCHPAD", keynum=QKEYS.K_TOUCHPAD},
            new keyname_t(){name="BTN_BACK", keynum=QKEYS.K_BTN_BACK},
            new keyname_t(){name="BTN_GUIDE", keynum=QKEYS.K_BTN_GUIDE},
            new keyname_t(){name="BTN_START", keynum=QKEYS.K_BTN_START},

            // virtual keys you get by pressing the corresponding normal joy key
            // and the altselector key
            new keyname_t(){name="BTN_A_ALT", keynum=QKEYS.K_BTN_A_ALT},
            new keyname_t(){name="BTN_B_ALT", keynum=QKEYS.K_BTN_B_ALT},
            new keyname_t(){name="BTN_X_ALT", keynum=QKEYS.K_BTN_X_ALT},
            new keyname_t(){name="BTN_Y_ALT", keynum=QKEYS.K_BTN_Y_ALT},
            new keyname_t(){name="STICK_LEFT_ALT", keynum=QKEYS.K_STICK_LEFT_ALT},
            new keyname_t(){name="STICK_RIGHT_ALT", keynum=QKEYS.K_STICK_RIGHT_ALT},
            new keyname_t(){name="SHOULDR_LEFT_ALT", keynum=QKEYS.K_SHOULDER_LEFT_ALT},
            new keyname_t(){name="SHOULDR_RIGHT_ALT", keynum=QKEYS.K_SHOULDER_RIGHT_ALT},
            new keyname_t(){name="TRIG_LEFT_ALT", keynum=QKEYS.K_TRIG_LEFT_ALT},
            new keyname_t(){name="TRIG_RIGHT_ALT", keynum=QKEYS.K_TRIG_RIGHT_ALT},

            new keyname_t(){name="DP_UP_ALT", keynum=QKEYS.K_DPAD_UP_ALT},
            new keyname_t(){name="DP_DOWN_ALT", keynum=QKEYS.K_DPAD_DOWN_ALT},
            new keyname_t(){name="DP_LEFT_ALT", keynum=QKEYS.K_DPAD_LEFT_ALT},
            new keyname_t(){name="DP_RIGHT_ALT", keynum=QKEYS.K_DPAD_RIGHT_ALT},

            new keyname_t(){name="PADDLE_1_ALT", keynum=QKEYS.K_PADDLE_1_ALT},
            new keyname_t(){name="PADDLE_2_ALT", keynum=QKEYS.K_PADDLE_2_ALT},
            new keyname_t(){name="PADDLE_3_ALT", keynum=QKEYS.K_PADDLE_3_ALT},
            new keyname_t(){name="PADDLE_4_ALT", keynum=QKEYS.K_PADDLE_4_ALT},
            new keyname_t(){name="BTN_MISC1_ALT", keynum=QKEYS.K_BTN_MISC1_ALT},
            new keyname_t(){name="TOUCHPAD_ALT", keynum=QKEYS.K_TOUCHPAD_ALT},
            new keyname_t(){name="BTN_BACK_ALT", keynum=QKEYS.K_BTN_BACK_ALT},
            new keyname_t(){name="BTN_GUIDE_ALT", keynum=QKEYS.K_BTN_GUIDE_ALT},
            new keyname_t(){name="BTN_START_ALT", keynum=QKEYS.K_BTN_START_ALT},

            new keyname_t(){name="JOY_BACK", keynum=QKEYS.K_JOY_BACK},

            new keyname_t(){name="SUPER", keynum=QKEYS.K_SUPER},
            new keyname_t(){name="COMPOSE", keynum=QKEYS.K_COMPOSE},
            new keyname_t(){name="MODE", keynum=QKEYS.K_MODE},
            new keyname_t(){name="HELP", keynum=QKEYS.K_HELP},
            new keyname_t(){name="PRINT", keynum=QKEYS.K_PRINT},
            new keyname_t(){name="SYSREQ", keynum=QKEYS.K_SYSREQ},
            new keyname_t(){name="SCROLLOCK", keynum=QKEYS.K_SCROLLOCK},
            new keyname_t(){name="MENU", keynum=QKEYS.K_MENU},
            new keyname_t(){name="UNDO", keynum=QKEYS.K_UNDO},

            // { "SC_A", K_SC_A },
            new keyname_t(){name="SC_A", keynum=QKEYS.K_SC_A},
            new keyname_t(){name="SC_B", keynum=QKEYS.K_SC_B},
            new keyname_t(){name="SC_C", keynum=QKEYS.K_SC_C},
            new keyname_t(){name="SC_D", keynum=QKEYS.K_SC_D},
            new keyname_t(){name="SC_E", keynum=QKEYS.K_SC_E},
            new keyname_t(){name="SC_F", keynum=QKEYS.K_SC_F},
            new keyname_t(){name="SC_G", keynum=QKEYS.K_SC_G},
            new keyname_t(){name="SC_H", keynum=QKEYS.K_SC_H},
            new keyname_t(){name="SC_I", keynum=QKEYS.K_SC_I},
            new keyname_t(){name="SC_J", keynum=QKEYS.K_SC_J},
            new keyname_t(){name="SC_K", keynum=QKEYS.K_SC_K},
            new keyname_t(){name="SC_L", keynum=QKEYS.K_SC_L},
            new keyname_t(){name="SC_M", keynum=QKEYS.K_SC_M},
            new keyname_t(){name="SC_N", keynum=QKEYS.K_SC_N},
            new keyname_t(){name="SC_O", keynum=QKEYS.K_SC_O},
            new keyname_t(){name="SC_P", keynum=QKEYS.K_SC_P},
            new keyname_t(){name="SC_Q", keynum=QKEYS.K_SC_Q},
            new keyname_t(){name="SC_R", keynum=QKEYS.K_SC_R},
            new keyname_t(){name="SC_S", keynum=QKEYS.K_SC_S},
            new keyname_t(){name="SC_T", keynum=QKEYS.K_SC_T},
            new keyname_t(){name="SC_U", keynum=QKEYS.K_SC_U},
            new keyname_t(){name="SC_V", keynum=QKEYS.K_SC_V},
            new keyname_t(){name="SC_W", keynum=QKEYS.K_SC_W},
            new keyname_t(){name="SC_X", keynum=QKEYS.K_SC_X},
            new keyname_t(){name="SC_Y", keynum=QKEYS.K_SC_Y},
            new keyname_t(){name="SC_Z", keynum=QKEYS.K_SC_Z},
            new keyname_t(){name="SC_MINUS", keynum=QKEYS.K_SC_MINUS},
            new keyname_t(){name="SC_EQUALS", keynum=QKEYS.K_SC_EQUALS},
            new keyname_t(){name="SC_LEFTBRACKET", keynum=QKEYS.K_SC_LEFTBRACKET},
            new keyname_t(){name="SC_RIGHTBRACKET", keynum=QKEYS.K_SC_RIGHTBRACKET},
            new keyname_t(){name="SC_BACKSLASH", keynum=QKEYS.K_SC_BACKSLASH},
            new keyname_t(){name="SC_NONUSHASH", keynum=QKEYS.K_SC_NONUSHASH},
            new keyname_t(){name="SC_SEMICOLON", keynum=QKEYS.K_SC_SEMICOLON},
            new keyname_t(){name="SC_APOSTROPHE", keynum=QKEYS.K_SC_APOSTROPHE},
            new keyname_t(){name="SC_GRAVE", keynum=QKEYS.K_SC_GRAVE}, // console key
            new keyname_t(){name="SC_COMMA", keynum=QKEYS.K_SC_COMMA},
            new keyname_t(){name="SC_PERIOD", keynum=QKEYS.K_SC_PERIOD},
            new keyname_t(){name="SC_SLASH", keynum=QKEYS.K_SC_SLASH},
            new keyname_t(){name="SC_NONUSBACKSLASH", keynum=QKEYS.K_SC_NONUSBACKSLASH},
            new keyname_t(){name="SC_INTERNATIONAL1", keynum=QKEYS.K_SC_INTERNATIONAL1},
            new keyname_t(){name="SC_INTERNATIONAL2", keynum=QKEYS.K_SC_INTERNATIONAL2},
            new keyname_t(){name="SC_INTERNATIONAL3", keynum=QKEYS.K_SC_INTERNATIONAL3},
            new keyname_t(){name="SC_INTERNATIONAL4", keynum=QKEYS.K_SC_INTERNATIONAL4},
            new keyname_t(){name="SC_INTERNATIONAL5", keynum=QKEYS.K_SC_INTERNATIONAL5},
            new keyname_t(){name="SC_INTERNATIONAL6", keynum=QKEYS.K_SC_INTERNATIONAL6},
            new keyname_t(){name="SC_INTERNATIONAL7", keynum=QKEYS.K_SC_INTERNATIONAL7},
            new keyname_t(){name="SC_INTERNATIONAL8", keynum=QKEYS.K_SC_INTERNATIONAL8},
            new keyname_t(){name="SC_INTERNATIONAL9", keynum=QKEYS.K_SC_INTERNATIONAL9},
            new keyname_t(){name="SC_THOUSANDSSEPARATOR", keynum=QKEYS.K_SC_THOUSANDSSEPARATOR},
            new keyname_t(){name="SC_DECIMALSEPARATOR", keynum=QKEYS.K_SC_DECIMALSEPARATOR},
            new keyname_t(){name="SC_CURRENCYUNIT", keynum=QKEYS.K_SC_CURRENCYUNIT},
            new keyname_t(){name="SC_CURRENCYSUBUNIT", keynum=QKEYS.K_SC_CURRENCYSUBUNIT}
        };

        private string[] keybindings = new string[(int)QKEYS.K_LAST];
        private bool[] consolekeys = new bool[(int)QKEYS.K_LAST]; /* if true, can't be rebound while in console */
        private bool[] menubound = new bool[(int)QKEYS.K_LAST]; /* if true, can't be rebound while in menu */
        private int[] key_repeats = new int[(int)QKEYS.K_LAST]; /* if > 1, it is autorepeating */
        private bool[] keydown = new bool[(int)QKEYS.K_LAST];


        public void Key_Init()
        {
            // int i;
            // for (i = 0; i < NUM_KEY_LINES; i++)
            // {
            //     key_lines[i][0] = ']';
            //     key_lines[i][1] = 0;
            // }
            // // can't call Key_ReadConsoleHistory() here because FS_Gamedir() isn't set yet

            // key_linepos = 1;

            /* init 128 bit ascii characters in console mode */
            for (int i = 32; i < 128; i++)
            {
                consolekeys[i] = true;
            }

            consolekeys[(int)QKEYS.K_ENTER] = true;
            consolekeys[(int)QKEYS.K_KP_ENTER] = true;
            consolekeys[(int)QKEYS.K_TAB] = true;
            consolekeys[(int)QKEYS.K_LEFTARROW] = true;
            consolekeys[(int)QKEYS.K_KP_LEFTARROW] = true;
            consolekeys[(int)QKEYS.K_RIGHTARROW] = true;
            consolekeys[(int)QKEYS.K_KP_RIGHTARROW] = true;
            consolekeys[(int)QKEYS.K_UPARROW] = true;
            consolekeys[(int)QKEYS.K_KP_UPARROW] = true;
            consolekeys[(int)QKEYS.K_DOWNARROW] = true;
            consolekeys[(int)QKEYS.K_KP_DOWNARROW] = true;
            consolekeys[(int)QKEYS.K_BACKSPACE] = true;
            consolekeys[(int)QKEYS.K_HOME] = true;
            consolekeys[(int)QKEYS.K_KP_HOME] = true;
            consolekeys[(int)QKEYS.K_END] = true;
            consolekeys[(int)QKEYS.K_KP_END] = true;
            consolekeys[(int)QKEYS.K_PGUP] = true;
            consolekeys[(int)QKEYS.K_KP_PGUP] = true;
            consolekeys[(int)QKEYS.K_PGDN] = true;
            consolekeys[(int)QKEYS.K_KP_PGDN] = true;
            consolekeys[(int)QKEYS.K_SHIFT] = true;
            consolekeys[(int)QKEYS.K_INS] = true;
            consolekeys[(int)QKEYS.K_KP_INS] = true;
            consolekeys[(int)QKEYS.K_KP_DEL] = true;
            consolekeys[(int)QKEYS.K_KP_SLASH] = true;
            consolekeys[(int)QKEYS.K_KP_STAR] = true;
            consolekeys[(int)QKEYS.K_KP_PLUS] = true;
            consolekeys[(int)QKEYS.K_KP_MINUS] = true;
            consolekeys[(int)QKEYS.K_KP_5] = true;
            consolekeys[(int)QKEYS.K_MWHEELUP] = true;
            consolekeys[(int)QKEYS.K_MWHEELDOWN] = true;
            consolekeys[(int)QKEYS.K_MOUSE4] = true;
            consolekeys[(int)QKEYS.K_MOUSE5] = true;

            consolekeys['`'] = false;
            consolekeys['~'] = false;
            consolekeys['^'] = false;

            menubound[(int)QKEYS.K_ESCAPE] = true;

            for (int i = 0; i < 12; i++)
            {
                menubound[(int)QKEYS.K_F1 + i] = true;
            }

            /* register our variables */
            // cfg_unbindall = Cvar_Get("cfg_unbindall", "1", CVAR_ARCHIVE);

            // /* register our functions */
            // Cmd_AddCommand("bind", Key_Bind_f);
            // Cmd_AddCommand("unbind", Key_Unbind_f);
            // Cmd_AddCommand("unbindall", Key_Unbindall_f);
            // Cmd_AddCommand("bindlist", Key_Bindlist_f);
        }

        /*
        * Called every frame for every detected keypress.
        * This is only for movement and special characters,
        * anything else is handled by Char_Event().
        */
        public void Key_Event(int key, bool down, bool special)
        {
            // char cmd[1024];
            // char *kb;
            // cvar_t *fullscreen;
            // unsigned int time = Sys_Milliseconds();

            // // evil hack for the joystick key altselector, which turns K_BTN_x into K_BTN_x_ALT
            // if(joy_altselector_pressed && key >= K_JOY_FIRST_REGULAR && key <= K_JOY_LAST_REGULAR)
            // {
            //     // make sure key is not the altselector itself (which we won't turn into *_ALT)
            //     if(keybindings[key] == NULL || strcmp(keybindings[key], "+joyaltselector") != 0)
            //     {
            //         int altkey = key + (K_JOY_FIRST_REGULAR_ALT - K_JOY_FIRST_REGULAR);
            //         // allow fallback to binding with non-alt key
            //         if(keybindings[altkey] != NULL || keybindings[key] == NULL)
            //             key = altkey;
            //     }
            // }

            /* Track if key is down */
            keydown[key] = down;

            // /* Evil hack against spurious cinematic aborts. */
            // if (down && (key != K_ESCAPE) && !keydown[K_SHIFT])
            // {
            //     abort_cinematic = cls.realtime;
            // }

            // /* Ignore most autorepeats */
            // if (down)
            // {
            //     key_repeats[key]++;

            //     if ((key != K_BACKSPACE) &&
            //         (key != K_PAUSE) &&
            //         (key != K_PGUP) &&
            //         (key != K_KP_PGUP) &&
            //         (key != K_PGDN) &&
            //         (key != K_KP_PGDN) &&
            //         (key_repeats[key] > 1))
            //     {
            //         return;
            //     }
            // }
            // else
            // {
            //     key_repeats[key] = 0;
            // }

            // /* Fullscreen switch through Alt + Return */
            // if (down && keydown[K_ALT] && key == K_ENTER)
            // {
            //     fullscreen = Cvar_Get("vid_fullscreen", "0", CVAR_ARCHIVE);

            //     if (!fullscreen->value)
            //     {
            //         Cvar_Set("vid_fullscreen", "1");
            //         Cbuf_AddText("vid_restart\n");
            //     }
            //     else
            //     {
            //         Cvar_Set("vid_fullscreen", "0");
            //         Cbuf_AddText("vid_restart\n");
            //     }

            //     return;
            // }

            // /* Toogle console through Shift + Escape or special K_CONSOLE key */
            // if (key == K_CONSOLE || (keydown[K_SHIFT] && key == K_ESCAPE))
            // {
            //     if (down)
            //     {
            //         Con_ToggleConsole_f();
            //     }
            //     return;
            // }

            // /* Key is unbound */
            // if ((key >= K_MOUSE1 && key != K_JOY_BACK) && !keybindings[key] && (cls.key_dest != key_console) &&
            //     (cls.state == ca_active))
            // {
            //     Com_Printf("%s (%d) is unbound, hit F4 to set.\n", Key_KeynumToString(key), key);
            // }

            /* While in attract loop all keys besides F1 to F12 (to
            allow quick load and the like) are treated like escape. */
            if (cl.attractloop && (cls.key_dest != keydest_t.key_menu) &&
                !((key >= (int)QKEYS.K_F1) && (key <= (int)QKEYS.K_F12)))
            {
                key = (int)QKEYS.K_ESCAPE;
            }

            /* Escape has a special meaning. Depending on the situation it
            - pauses the game and breaks into the menu
            - stops the attract loop and breaks into the menu
            - closes the console and breaks into the menu
            - moves one menu level up
            - closes the menu
            - closes the help computer
            - closes the chat window
            Fully same logic for K_JOY_BACK */
            if (cls.disable_screen == 0)
            {
                if (key == (int)QKEYS.K_ESCAPE || key == (int)QKEYS.K_JOY_BACK)
                {
                    if (!down)
                    {
                        return;
                    }

            //         /* Close the help computer */
            //         if (cl.frame.playerstate.stats[STAT_LAYOUTS] &&
            //             (cls.key_dest == key_game))
            //         {
            //             Cbuf_AddText("cmd putaway\n");
            //             return;
            //         }

                    switch (cls.key_dest)
                    {
            //             /* Close chat window */
            //             case key_message:
            //                 Key_Message(key);
            //                 break;

            //             /* Close menu or one layer up */
            //             case key_menu:
            //                 M_Keydown(key);
            //                 break;

                        /* Pause game and / or leave console,
                        break into the menu. */
                        case keydest_t.key_game:
                        case keydest_t.key_console:
                            M_Menu_Main();
                            break;
                    }

                    return;
                }
            }

            /* This is one of the most ugly constructs I've
            found so far in Quake II. When the game is in
            the intermission, the player can press any key
            to end it and advance into the next level. It
            should be easy to figure out at server level if
            a button is pressed. But somehow the developers
            decided, that they'll need special move state
            BUTTON_ANY to solve this problem. So there's
            this global variable anykeydown. If it's not
            0, CL_FinishMove() encodes BUTTON_ANY into the
            button state. The server reads this value and
            sends it to gi->ClientThink() where it's used
            to determine if the intermission shall end.
            Needless to say that this is the only consumer
            of BUTTON_ANY.

            Since we cannot alter the network protocol nor
            the server <-> game API, I'll leave things alone
            and try to forget. */
            if (down)
            {
            //     if (key_repeats[key] == 1)
            //     {
            //         anykeydown++;
            //     }
            }
            else
            {
            //     anykeydown--;

            //     if (anykeydown < 0)
            //     {
            //         anykeydown = 0;
            //     }
            }

            /* key up events only generate commands if the game key binding
            is a button command (leading+ sign). These will occur even in
            console mode, to keep the character from continuing an action
            started before a console switch. Button commands include the
            kenum as a parameter, so multiple downs can be matched with ups */
            if (!down)
            {
            //     kb = keybindings[key];

            //     if (kb && (kb[0] == '+'))
            //     {
            //         Com_sprintf(cmd, sizeof(cmd), "-%s %i %i\n", kb + 1, key, time);
            //         Cbuf_AddText(cmd);
            //     }

                return;
            }
            // else if (((cls.key_dest == key_menu) && menubound[key]) ||
            //         ((cls.key_dest == key_console) && !consolekeys[key]) ||
            //         ((cls.key_dest == key_game) && ((cls.state == ca_active) ||
            //         !consolekeys[key])))
            // {
            //     kb = keybindings[key];

            //     if (kb)
            //     {
            //         if (kb[0] == '+')
            //         {
            //             /* button commands add keynum and time as a parm */
            //             Com_sprintf(cmd, sizeof(cmd), "%s %i %i\n", kb, key, time);
            //             Cbuf_AddText(cmd);
            //         }
            //         else
            //         {
            //             Cbuf_AddText(kb);
            //             Cbuf_AddText("\n");
            //         }
            //     }

            //     return;
            // }

            /* All input subsystems handled after this point only
            care for key down events (=> if(!down) returns above). */

            /* Everything that's not a special char
            is processed by Char_Event(). */
            // if (!special)
            // {
            //     return;
            // }

            /* Send key to the active input subsystem */
            Console.WriteLine($"cls.key_dest {cls.key_dest}");
            switch (cls.key_dest)
            {
                /* Chat */
            //     case key_message:
            //         Key_Message(key);
            //         break;

                /* Menu */
                case keydest_t.key_menu:
                    M_Keydown(key);
                    break;

            //     /* Console */
            //     case key_game:
            //     case key_console:
            //         Key_Console(key);
            //         break;
            }
        }

    }
}